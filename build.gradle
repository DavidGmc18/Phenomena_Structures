buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            name = 'MinecraftForge'
            url = 'https://maven.minecraftforge.net/'
        }
            //url = 'https://repo.spongepowered.org/repository/maven-public/'

        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        //classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//apply plugin: 'org.spongepowered.mixin'

version = "2.3.1a-1.20" //TODO change version every time
group = 'net.Davidak.phenomena' // https://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Phenomena'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.20'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Needed to make other mods with mixins be able to run in you development environment
            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            //args "-mixin.config=phenomena.mixin.json"

            mods { phenomena { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Needed to make other mods with mixins be able to run in you development environment
            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods { phenomena {  source sourceSets.main } }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20-46.0.1'

    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from('/') {
        include 'LICENSE.txt'
    }

    manifest {
        attributes([
            "Specification-Title": "phenomena",
            "Specification-Vendor": "Davidak",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"Davidak",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            //"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            //"TweakOrder": 0,
            //"MixinConfigs": "phenomena.mixin.json",
            //'FMLCorePluginContainsFMLMod': 'true'
        ])
        finalizedBy 'reobfJar'
    }

    task srcJar(type: Jar) {
        archiveClassifier.set("src")
        from sourceSets.main.allJava
    }

    task apiJar(type: Jar) {
        archiveClassifier.set("api")
        from sourceSets.main.allJava
    }
}

sourceSets {
    main {
        //ext.refMap = "mixins.phenomena.refmap.json" //mixins.nature_arise.refmap.json
    }
    //mixin {
    //    // MixinGradle Settings
    //    add sourceSets.main, 'mixins.phenomena.refmap.json'
    //    config 'mixins.phenomena.json'

    //    debug.verbose = true
    //    debug.export = true

    //    disableTargetValidator = true
    //    overwriteErrorLevel = 'error'
    //    quiet
    //}
}
